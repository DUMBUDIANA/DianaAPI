{"ast":null,"code":"var _jsxFileName = \"/Users/sproutstudent/Desktop/booksapp/frontendfile/src/components/forms/BookForm.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useState } from 'react';\nimport DropWrapper from '../common/DropWrapper';\nimport useHover from '../common/useHover';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookForm = props => {\n  _s();\n\n  const [hoverRef, isHovering] = useHover();\n  const [image, setImage] = useState(undefined);\n\n  const hoverStyle = () => {\n    return isHovering ? {\n      opacity: '25%'\n    } : {\n      opacity: '100%'\n    };\n  };\n\n  const handleImageChosen = e => {\n    let size = 160;\n    let newHeight;\n    let newWidth;\n    let files = e.target.files || e.dataTransfer.files;\n\n    if (files && files.length > 0) {\n      let f = files[0];\n      let reader = new FileReader();\n\n      reader.onload = function (theFile) {\n        return function (e2) {\n          let image = new Image();\n\n          image.onload = function () {\n            newHeight = this.height;\n            newWidth = this.width;\n\n            if (this.height > size) {\n              newHeight = size;\n              newWidth = newHeight * this.width / this.height;\n            }\n\n            if (newWidth > size) {\n              let oldWidth = newWidth;\n              newWidth = size;\n              newHeight = newWidth * newHeight / oldWidth;\n            }\n\n            let canvas = document.createElement(\"canvas\");\n            let ctx = canvas.getContext(\"2d\");\n            canvas.width = newWidth;\n            canvas.height = newHeight;\n            ctx.drawImage(image, 0, 0, newWidth, newHeight); //your code here\n\n            setImage(canvas.toDataURL(f.type));\n          };\n\n          image.src = e2.target.result;\n        };\n      }(f);\n\n      reader.readAsDataURL(f);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      title: '',\n      author: ''\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.title) {\n        errors.title = 'Title Required';\n      } else if (values.title.length < 3) {\n        errors.title = 'Title must be at least 3 characters';\n      }\n\n      if (!values.author) {\n        errors.author = 'Author Required';\n      } else if (values.author.length < 3) {\n        errors.author = 'Author must be at least 3 characters';\n      }\n\n      return errors;\n    },\n    onSubmit: (values, _ref) => {\n      let {\n        resetForm\n      } = _ref;\n      const book = {\n        title: values.title,\n        author: values.author,\n        cover: image,\n        bookId: -1\n      };\n      props.addBook(book).then(() => {\n        resetForm();\n        setImage(undefined);\n      });\n    },\n    children: _ref2 => {\n      let {\n        isSubmitting\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        className: \"form-group form-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"control-label\",\n          children: [\"Title:\", /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            className: \"form-control\",\n            name: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"control-label\",\n          children: [\"Author:\", /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            className: \"form-control\",\n            name: \"author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DropWrapper, {\n          dropped: handleImageChosen,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image || './drop.png',\n            alt: \"\",\n            ref: hoverRef,\n            style: hoverStyle()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          disabled: isSubmitting,\n          children: \"Add Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"title\",\n          className: \"alert alert-danger\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: \"alert alert-danger\",\n          name: \"author\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookForm, \"54FIMSw/pZcaC0RHfhVWi6vhmm4=\", false, function () {\n  return [useHover];\n});\n\n_c = BookForm;\nBookForm.propTypes = {\n  addBook: PropTypes.func.isRequired\n};\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["/Users/sproutstudent/Desktop/booksapp/frontendfile/src/components/forms/BookForm.js"],"names":["PropTypes","Formik","Form","Field","ErrorMessage","useState","DropWrapper","useHover","BookForm","props","hoverRef","isHovering","image","setImage","undefined","hoverStyle","opacity","handleImageChosen","e","size","newHeight","newWidth","files","target","dataTransfer","length","f","reader","FileReader","onload","theFile","e2","Image","height","width","oldWidth","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","type","src","result","readAsDataURL","title","author","values","errors","resetForm","book","cover","bookId","addBook","then","isSubmitting","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useState } from 'react';\nimport DropWrapper from '../common/DropWrapper';\nimport useHover from '../common/useHover';\n\nconst BookForm = (props) => {\n    const [hoverRef, isHovering] = useHover();\n    const [image, setImage] = useState(undefined);\n\n    const hoverStyle = () => {\n        return isHovering ? { opacity: '25%' } : { opacity: '100%' };\n    };\n\n    const handleImageChosen = (e) => {\n        let size = 160;\n        let newHeight;\n        let newWidth;\n        let files = e.target.files || e.dataTransfer.files;\n        if (files && files.length > 0) {\n            let f = files[0];\n            let reader = new FileReader();\n            reader.onload = (function (theFile) {\n                return function (e2) {\n                    let image = new Image();\n                    image.onload = function () {\n                        newHeight = this.height;\n                        newWidth = this.width;\n                        if (this.height > size) {\n                            newHeight = size;\n                            newWidth = (newHeight * this.width) / this.height;\n                        }\n                        if (newWidth > size) {\n                            let oldWidth = newWidth;\n                            newWidth = size;\n                            newHeight = (newWidth * newHeight) / oldWidth;\n                        }\n                        let canvas = document.createElement(\"canvas\");\n                        let ctx = canvas.getContext(\"2d\");\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(image, 0, 0, newWidth, newHeight);\n                        //your code here\n                        setImage(canvas.toDataURL(f.type));\n\n                    };\n                    image.src = e2.target.result;\n                };\n            })(f);\n            reader.readAsDataURL(f);\n        }\n    }\n\n    return (\n        <Formik\n\n            initialValues={{\n                title: '',\n                author: ''\n            }}\n            validate={values => {\n                const errors = {};\n                if (!values.title) {\n                    errors.title = 'Title Required';\n                } else if (values.title.length < 3) {\n                    errors.title = 'Title must be at least 3 characters';\n                }\n                if (!values.author) {\n                    errors.author = 'Author Required';\n                } else if (values.author.length < 3) {\n                    errors.author = 'Author must be at least 3 characters';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { resetForm }) => {\n                const book = {\n                    title: values.title,\n                    author: values.author,\n                    cover: image,\n                    bookId: -1\n                }\n                props.addBook(book).then(() => {\n                    resetForm();\n                    setImage(undefined);\n                });\n            }}\n        >\n            {({ isSubmitting }) => (\n                <Form className=\"form-group form-inline\">\n                    <label className=\"control-label\">Title:\n\t\t\t\t<Field type=\"text\" className=\"form-control\" name=\"title\" />\n                    </label>\n                    <label className=\"control-label\">Author:\n\t\t\t\t<Field type=\"text\" className=\"form-control\" name=\"author\" />\n                    </label>\n                    <DropWrapper dropped={handleImageChosen}>\n                        <img src={image || './drop.png'} alt=\"\"\n                             ref={hoverRef} style={hoverStyle()}  />\n                    </DropWrapper>\n                    <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>Add Book</button>\n                    <ErrorMessage name=\"title\" className=\"alert alert-danger\" component=\"div\" />\n                    <ErrorMessage className=\"alert alert-danger\" name=\"author\" component=\"div\" />\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nBookForm.propTypes = { addBook: PropTypes.func.isRequired };\n\nexport default BookForm;\n"]},"metadata":{},"sourceType":"module"}